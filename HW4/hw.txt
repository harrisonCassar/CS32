/****************************************************************************
	Harrison Cassar
	ID: 505114980
	Discussion 1C
	TA: Hackett, T.R.

	Homework 4 for CS32 with Professor Carey Nachenberg

	Last Edit: 3/4/2018

****************************************************************************/

2. The reason why the call to Set<Coord>::insert causes at least one compilation error is because the Coord class does not properly define a comparison operator for the object. Therefore when the insert function utilizes the comparison operator (as well as calling the findFirstAtLeast function which also uses the '<' operator), the code does not know how to properly compare two Coord class objects.

3b. The reason why we would not be able to solve it recursively with only the one-parameter overload of the listAll function is because there would be no way of properly printing the tree path structures, as subsequent calls of the recursive function wouldn't be able to know where in the "directory" or how far down their "path" is, as the only information given to it is the current menu item itself.

4a. The time complexity of the algorithm is O(N^3), as the worse case scenario is that all of the 3 loops will be run N times each. Since these loops are nested within each other, the N operations of the second loop will be run N times, and the very inner loop's N operations will be run N^2 times.

4b. The time complexity of this algorithm is still O(N^3) because as N approaches larger and larger values, the second loop (the one with a loop limit of i now instead of N) will be essentially running until much larger values itself, and therefore it can be treated as its loop limit being N instead of i. Additionally, one could argue mathematically that this time complexity holds true, as the sum of operations (or loop runs) in a nested two-loop system similar to this would be 1 + 2 + 3 + ... N-1 + N, which sums to (N)(N+1)/2, where its largest exponential value would be N^2 (which, when multipled by the 3rd nested loop's N operations would become N^3).

5a. The time complexity of this unite function is O(N^2). To begin, the worse case scenario is when we enter the 'else' portion of the 'if, else-if, else' statement, which would result in N visited linked list nodes for the assignment operator. Now, when considering the 'for' loop, the call to 'get' is O(N) as the worse case, and this is added to the N visited linked list nodes done by the 'insert' method to recieve 2N. This is then multiplied by N times for the iteration through the 'for' loop to recieve 2N^2. We would add this to the 'else' statement's N visits, which we would then drop the constant coefficient and lower-order terms to recieve O(N^2).

5b. The time complexity of this unite function is O(NlogN). For the two 'for' loops, these would each produce N objects visited, where the sum of these two operations would be 2N. This is then added to the NlogN operations done by the 'sort' function call. The erase 'while' loop would be another N operations which is added to the rest, and the 'for' loop for copying values over from v into the result set would be N operations. This, all summed together, and dropping lower-order terms, results in NlogN, which gives us our worst case time complexity.

5c. Assuming that the implemented code is correct, and assuming the set's linked list implementation is circular, then the worst case scenario would be O(N). The reason for this is because as p1 and p2 are iterating through their respective sets, the algorithm will vist 2N linked list nodes in the while loop at the worse case (both are at about N elements traversed before leaving the while loop). This is then added with the N more elements visited in the 'for' loop after the 'while' loop, where we drop the coefficients and recieve O(N).

Assuming the implementation is absolutely correct, and that the sets' linked lists are not circular, then we have to assume that the sets passed in have 1 or more items already in them (or else lines 14-15 will automatically crash the code). This would still, however, end up causing a while loop (from line 16 onward) to run infinitely, and therefore the worst case scenario would be infinite operations (infinite loop).